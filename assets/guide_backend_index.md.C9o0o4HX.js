import{_ as a,c as i,o,ag as t}from"./chunks/framework.C4nOkCZI.js";const h=JSON.parse('{"title":"Backend Overview","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/backend/index.md","filePath":"guide/backend/index.md"}'),n={name:"guide/backend/index.md"};function s(r,e,l,d,p,c){return o(),i("div",null,[...e[0]||(e[0]=[t(`<h1 id="backend-overview" tabindex="-1">Backend Overview <a class="header-anchor" href="#backend-overview" aria-label="Permalink to &quot;Backend Overview&quot;">‚Äã</a></h1><p>LaravelUi5 bridges two ecosystems ‚Äî Laravel and OpenUI5 ‚Äî by providing a consistent artifact model that spans both worlds. Each UI5 module you create has a backend representation (PHP) and a frontend counterpart (JavaScript). This duality is managed through unified conventions and a set of Artisan tools.</p><h2 id="module-creation-strategies" tabindex="-1">Module Creation Strategies <a class="header-anchor" href="#module-creation-strategies" aria-label="Permalink to &quot;Module Creation Strategies&quot;">‚Äã</a></h2><p>LaravelUi5 supports both quick-start scaffolding for demos and structured integration of real-world UI5 projects.</p><h3 id="quick-start-modules" tabindex="-1">Quick Start Modules <a class="header-anchor" href="#quick-start-modules" aria-label="Permalink to &quot;Quick Start Modules&quot;">‚Äã</a></h3><p>Here‚Äôs an example you‚Äôll also see in our quickstart video:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ui5:sca</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Users</span></span></code></pre></div><p>This command creates a fully working example module under <code>ui5/Users</code>, including:</p><ul><li><code>composer.json</code> with package metadata</li><li><code>src/UsersModule.php</code> defining the backend module entry point</li><li><code>src/UsersApp.php</code> defining the backend app entry point</li><li><code>resources/app/</code> containing a UI5 frontend app</li><li><code>UsersServiceProvider.php</code> to register the module</li></ul><p>This entry point shows how easily a UI5 module can be wired into Laravel, without external setup.</p><p>It&#39;s ideal for:</p><ul><li>demos and onboarding</li><li>simple internal tools</li><li>prototyping and experimentation</li></ul><blockquote><p>‚ö†Ô∏è Note: These modules are not meant to replace full-fledged UI5 projects. If you need TypeScript, test tooling, or advanced deployment pipelines, we recommend developing your UI5 app separately and integrating it via <code>ui5:app</code> or <code>ui5:lib</code>.</p></blockquote><h3 id="production-ready-module-imports" tabindex="-1">Production-Ready Module Imports <a class="header-anchor" href="#production-ready-module-imports" aria-label="Permalink to &quot;Production-Ready Module Imports&quot;">‚Äã</a></h3><p>The commands <code>ui5:app</code> and <code>ui5:lib</code> are designed to import artifacts from existing UI5 source projects into your Laravel environment. They assume:</p><ul><li>UI5 projects live <em>outside</em> the Laravel app (e.g. <code>../ui5-{domain}/</code>)</li><li>LaravelUi5 pulls in a specific version snapshot of the source</li><li>Artifacts are placed under <code>ui5/{Domain}/resources/ui5/</code></li><li>Matching backend integration (App class, Registry, ServiceProvider) is generated automatically</li></ul><p>This is the recommended approach for integrating production-grade UI5 apps or libraries.</p><h2 id="conventions" tabindex="-1">Conventions <a class="header-anchor" href="#conventions" aria-label="Permalink to &quot;Conventions&quot;">‚Äã</a></h2><p>The following conventions define how imported UI5 modules are structured, named, and integrated within the Laravel app.</p><h3 id="structure-conventions" tabindex="-1">Structure Conventions <a class="header-anchor" href="#structure-conventions" aria-label="Permalink to &quot;Structure Conventions&quot;">‚Äã</a></h3><p>In LaravelUi5, each UI5 application or library corresponds to exactly one <em>domain</em>.</p><p>Put differently: <strong>one app equals one module equals one source project</strong>.</p><p>This strict one-to-one relationship ensures clean boundaries and predictable integration.</p><p>The domain name you choose ‚Äî for example, <code>Users</code> or <code>Timesheet</code> ‚Äî determines the identity and structure of the module on all levels.</p><ul><li>It defines the <em>PHP namespace</em>, which can be customized using the <code>--php-ns-prefix</code> option.</li><li>It sets the <em>target folder</em> under <code>ui5/</code> inside the Laravel app, where the imported artifact will reside.</li><li>It controls the <em>JavaScript namespace</em> used for UI5 resolution, configurable via the <code>--js-ns-prefix</code> option.</li></ul><p>This convention keeps both backend and frontend aligned, and ensures that all generated artifacts remain modular, versionable, and easy to reason about.</p><blockquote><p>üìù <strong>Note</strong> The <code>--js-ns-prefix</code> option only applies when using <code>ui5:sca</code> to generate a new module from scratch. When importing existing projects via <code>ui5:app</code> or <code>ui5:lib</code>, the JavaScript namespace is read from the project&#39;s <code>ui5.yaml</code> file and cannot be overridden.</p></blockquote><h3 id="filesystem-conventions" tabindex="-1">Filesystem Conventions <a class="header-anchor" href="#filesystem-conventions" aria-label="Permalink to &quot;Filesystem Conventions&quot;">‚Äã</a></h3><p>LaravelUi5 assumes a <em>shared workspace</em> where your Laravel app and all UI5 source projects live side by side:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>your-workspace/</span></span>
<span class="line"><span>‚îú‚îÄ‚îÄ laravel-app/               ‚Üê The deployable Laravel project</span></span>
<span class="line"><span>‚îú‚îÄ‚îÄ ui5-core-lib/              ‚Üê Source project for a UI5 library</span></span>
<span class="line"><span>‚îú‚îÄ‚îÄ ui5-offers/                ‚Üê Source project for a UI5 application</span></span>
<span class="line"><span>‚îî‚îÄ‚îÄ io.pragmatiqu.budget/      ‚Üê Folder structure as generated by Easy UI5</span></span></code></pre></div><p>This layout is <em>required</em> and cannot be changed.</p><p><strong>How It Works</strong></p><ul><li>UI5 source projects (like <code>ui5-offers</code>) are developed <em>outside</em> the Laravel project.</li><li>LaravelUi5 provides Artisan commands (<code>ui5:app</code>, <code>ui5:lib</code>) to <em>import</em> a snapshot of the UI5 artifacts into the Laravel app.</li><li>Imported artifacts are placed inside</li></ul><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>laravel-app/</span></span>
<span class="line"><span>‚îî‚îÄ‚îÄ ui5/</span></span>
<span class="line"><span>    ‚îî‚îÄ‚îÄ Offers/</span></span>
<span class="line"><span>        ‚îî‚îÄ‚îÄ resources/</span></span>
<span class="line"><span>            ‚îî‚îÄ‚îÄ ui5/           ‚Üê Application or library source lives here</span></span></code></pre></div><p>This makes UI5 artifacts available for:</p><ul><li>Runtime serving via Laravel routes.</li><li>Integration with the registry and system config.</li><li>Deployment and packaging.</li></ul><blockquote><p>üõ†Ô∏è This approach gives you the best of both worlds: full freedom during UI5 development and full control during Laravel deployment.</p></blockquote><h2 id="artifact-hierarchy" tabindex="-1">Artifact Hierarchy <a class="header-anchor" href="#artifact-hierarchy" aria-label="Permalink to &quot;Artifact Hierarchy&quot;">‚Äã</a></h2><p>LaravelUi5 provides a structured artifact model inside the Laravel app, where UI5 components from external projects are <em>registered</em>, <em>organized</em>, and <em>integrated</em>.</p><p>Versioning itself happens in the UI5 source projects. LaravelUi5 pulls in specific versions as needed and exposes them as modular artifacts.</p><p>At the core of this model is a clear hierarchy:</p><ul><li><a href="./module.html">Modules</a> act as containers. They group related artifacts under a common domain but are not addressable on their own.</li><li><a href="./library.html">Libraries</a> typically reflect a one-to-one copy of an external UI5 library project. They provide shared UI logic across modules or apps.</li><li><a href="./app.html">Applications</a> are the logical root for user-facing content. They often serve as the anchor point for subordinate artifacts like <a href="./card.html">Cards</a>, <a href="./report.html">Reports</a>, <a href="./tile.html">Tiles</a>, and <a href="./kpi.html">KPIs</a> ‚Äî which derive their context from the app but can be composed and displayed independently.</li><li><a href="./dashboard.html">Dashboards</a> are UI compositions that bring together Cards, Tiles, and KPIs into a cohesive interface. Dashboards are typically defined and rendered inside the Laravel project, and can be either static or dynamic.</li><li><a href="./action.html">Actions</a> represent backend-only operations ‚Äî such as toggling flags, triggering workflows, or executing custom logic. They are defined in Laravel and callable from UI5 via a unified API interface (<code>LaravelUi5.call(...)</code>), independent of any visual component.</li></ul><p>This abstraction layer makes it easy to reason about complex UI5 landscapes while keeping everything modular and environment-aware.</p>`,43)])])}const m=a(n,[["render",s]]);export{h as __pageData,m as default};
