import{_ as a,c as t,o as i,ag as s}from"./chunks/framework.C4nOkCZI.js";const u=JSON.parse('{"title":"Ui5App","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/backend/app.md","filePath":"guide/backend/app.md"}'),o={name:"guide/backend/app.md"};function l(d,e,n,r,p,c){return i(),t("div",null,[...e[0]||(e[0]=[s(`<h1 id="ui5app" tabindex="-1">Ui5App <a class="header-anchor" href="#ui5app" aria-label="Permalink to &quot;Ui5App&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>A <code>Ui5App</code> is a frontend artifact in LaravelUi5 that encapsulates a reusable UI5 app developed outside the Laravel application. It bridges a deployed <code>dist</code> folder with backend metadata, versioning, and registry integration.</p><p>Each app is integrated into the Laravel app as part of a <code>Ui5Module</code>, and can later be discovered, versioned, and served through the LaravelUi5 registry.</p><blockquote><p>📝 <strong>Note</strong><br> A module can contain either a UI5 app or a UI5 library — but never both.</p></blockquote><h2 id="conceptual-overview" tabindex="-1">Conceptual Overview <a class="header-anchor" href="#conceptual-overview" aria-label="Permalink to &quot;Conceptual Overview&quot;">​</a></h2><p>LaravelUi5 supports importing fully built UI5 apps and wrapping them as native Laravel modules. This integration includes:</p><ul><li>A <code>Ui5App</code> is a <em>first-class backend representation of a deployed UI5 application</em>.</li><li>It is located inside a dedicated LaravelUi5 module (e.g. <code>ui5/Offers/</code>) that <em>must not mix in libraries</em>.</li><li>Each app implements <code>Ui5AppInterface</code> and is registered via a module in <code>config/ui5.php</code>.</li><li>The app metadata is extracted directly from the frontend build (e.g. <code>ui5.yaml</code>, <code>manifest.json</code>, <code>index.html</code>, <code>i18n.properties</code>).</li><li>A dedicated <code>ServiceProvider</code> is generated to bootstrap the module and register it with Laravel providers.</li><li>A minimal <code>composer.json</code> is created, allowing the module to be easily promoted into a standalone Composer package if needed.</li></ul><h2 id="how-to-generate" tabindex="-1">How to Generate <a class="header-anchor" href="#how-to-generate" aria-label="Permalink to &quot;How to Generate&quot;">​</a></h2><p>You can generate an <code>Ui5App</code> class using:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ui5:app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Offers</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --vendor=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Pragmatiqu IT GmbH&quot;</span></span></code></pre></div><p>This assumes a source folder exists in one of the following forms:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>../ui5-offers/                ← LaravelUi5 naming convention</span></span>
<span class="line"><span>../io.pragmatiqu.offers/      ← SAP Easy UI5 convention</span></span></code></pre></div><p>Before running the command, make sure to build the app via:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">Option</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>--create</code></td><td style="text-align:left;">Scaffold new app module (fails if it already exists)</td></tr><tr><td style="text-align:left;"><code>--refresh</code></td><td style="text-align:left;">Update an existing app module (fails if it does not exist)</td></tr><tr><td style="text-align:left;"><code>--vendor=</code></td><td style="text-align:left;">The vendor name of the module (default: <code>Pragmatiqu IT GmbH</code>)</td></tr><tr><td style="text-align:left;"><code>--php-ns-prefix=</code></td><td style="text-align:left;">PHP namespace prefix (default: <code>Pragmatiqu</code>)</td></tr><tr><td style="text-align:left;"><code>--js-ns-prefix=</code></td><td style="text-align:left;">JS namespace prefix (default: <code>io.pragmatiqu</code>)</td></tr><tr><td style="text-align:left;"><code>--package-prefix=</code></td><td style="text-align:left;">Composer package prefix (default: <code>pragmatiqu</code>)</td></tr></tbody></table><blockquote><p>⚠️ When neither <code>--create</code> nor <code>--refresh</code> is provided, LaravelUi5 will decide based on the presence of the module.</p></blockquote><h2 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h2><p>Upon successful execution, the following artifacts are generated inside the Laravel project:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ui5/Offers/</span></span>
<span class="line"><span>├── composer.json               ← Composer package file</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── OffersApp.php           ← App metadata class</span></span>
<span class="line"><span>│   ├── OffersModule.php        ← Module wrapper</span></span>
<span class="line"><span>|   └── OffersServiceProvider   ← ServiceProvider class</span></span>
<span class="line"><span>└── resources/ui5/              ← UI5 assets (preloads, messages, etc.)</span></span></code></pre></div><p>The build assets are copied from the <code>dist</code>-folder.</p><h2 id="metadata-resolution" tabindex="-1">Metadata Resolution <a class="header-anchor" href="#metadata-resolution" aria-label="Permalink to &quot;Metadata Resolution&quot;">​</a></h2><p>LaravelUi5 reads app metadata from the following locations in the source folder:</p><table tabindex="0"><thead><tr><th style="text-align:left;">Source file</th><th style="text-align:left;">Extracted data</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ui5.yaml</code></td><td style="text-align:left;">JS namespace, UI5 framework version</td></tr><tr><td style="text-align:left;"><code>package.json</code></td><td style="text-align:left;">App version</td></tr><tr><td style="text-align:left;"><code>dist/manifest.json</code></td><td style="text-align:left;"><code>sap.ui5</code> section (as JSON)</td></tr><tr><td style="text-align:left;"><code>dist/index.html</code></td><td style="text-align:left;">Bootstrap data-sap-ui-* attributes, inline JS/CSS</td></tr><tr><td style="text-align:left;"><code>dist/i18n/i18n.properties</code></td><td style="text-align:left;"><code>appTitle</code>, <code>appDescription</code></td></tr><tr><td style="text-align:left;"><code>dist/i18n/*.properties</code></td><td style="text-align:left;">All files copied into Laravel <code>resources/ui5/i18n/</code></td></tr></tbody></table><h2 id="class-structure" tabindex="-1">Class Structure <a class="header-anchor" href="#class-structure" aria-label="Permalink to &quot;Class Structure&quot;">​</a></h2><h3 id="offersapp-php" tabindex="-1"><code>OffersApp.php</code> <a class="header-anchor" href="#offersapp-php" aria-label="Permalink to &quot;\`OffersApp.php\`&quot;">​</a></h3><p>Implements:</p><ul><li><code>Ui5AppInterface</code></li></ul><p>Provides:</p><ul><li><code>getTitle()</code>, <code>getDescription()</code>, <code>getVersion()</code>, <code>getUi5Namespace()</code>.</li><li><code>getBootstrapAttributes()</code>, <code>getResourceNamespaces()</code>.</li><li><code>getManifestConfig()</code>, <code>getInlineScript()</code>, <code>getInlineCss()</code>.</li><li><code>getVendor()</code>.</li></ul><h3 id="offersmodule-php" tabindex="-1"><code>OffersModule.php</code> <a class="header-anchor" href="#offersmodule-php" aria-label="Permalink to &quot;\`OffersModule.php\`&quot;">​</a></h3><p>Implements:</p><ul><li><code>Ui5ModuleInterface</code></li></ul><p>Responsibilities:</p><ul><li>Return the app instance via <code>getApp()</code>.</li><li>Mark itself as root artifact via <code>getArtifactRoot()</code>.</li></ul><h3 id="offersserviceprovider-php" tabindex="-1"><code>OffersServiceProvider.php</code> <a class="header-anchor" href="#offersserviceprovider-php" aria-label="Permalink to &quot;\`OffersServiceProvider.php\`&quot;">​</a></h3><ul><li>Possibility to register classes and services in relation to the module.</li></ul><h2 id="module-integration" tabindex="-1">Module Integration <a class="header-anchor" href="#module-integration" aria-label="Permalink to &quot;Module Integration&quot;">​</a></h2><p>Each app is part of a domain-specific module. The module must be registered in your application’s <code>config/ui5.php</code> file:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// config/ui5.php</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;offers&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\Pragmatiqu\\Offers\\OffersModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p>This mapping defines how the app is exposed at runtime, and allows LaravelUi5 to route and manage resources per domain.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ul><li>Use <em>CamelCase</em> names for apps (e.g. <code>Offers</code>, <code>BudgetPlanner</code>).</li><li>Always run <code>npm run build</code> before executing <code>ui5:app</code>.</li><li>Provide meaningful values for <code>appTitle</code> and <code>appDescription</code> in <code>i18n.properties</code>.</li><li>Register your app module in <code>config/ui5.php</code> right after generation.</li><li>Always specify <code>--vendor</code>.</li><li>Avoid mixing libraries and apps in the same module.</li></ul><h2 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">​</a></h2><ul><li><a href="./module.html">Modules</a></li><li><a href="./index.html#artifact-hierarchy">Artifacts Overview</a></li></ul>`,46)])])}const f=a(o,[["render",l]]);export{u as __pageData,f as default};
