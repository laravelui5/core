import{_ as a,c as t,o as i,ag as s}from"./chunks/framework.C4nOkCZI.js";const u=JSON.parse('{"title":"Ui5Library","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/backend/library.md","filePath":"guide/backend/library.md"}'),l={name:"guide/backend/library.md"};function n(r,e,o,d,p,h){return i(),t("div",null,[...e[0]||(e[0]=[s(`<h1 id="ui5library" tabindex="-1">Ui5Library <a class="header-anchor" href="#ui5library" aria-label="Permalink to &quot;Ui5Library&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>A <code>Ui5Library</code> is a frontend-only artifact in LaravelUi5 that encapsulates a reusable UI5 library developed outside the Laravel application. Typical use cases include formatting utilities, reusable UI components, or shared business logic intended to be consumed by multiple UI5 apps.</p><p>Each library is integrated into the Laravel app as part of a <code>Ui5Module</code>, and can later be discovered, versioned, and served through the LaravelUi5 registry.</p><blockquote><p>📝 <strong>Note</strong><br> A module can contain either a UI5 app or a UI5 library — but never both.</p></blockquote><h2 id="conceptual-overview" tabindex="-1">Conceptual Overview <a class="header-anchor" href="#conceptual-overview" aria-label="Permalink to &quot;Conceptual Overview&quot;">​</a></h2><p>LaravelUi5 supports importing fully built UI5 libraries and wrapping them as native Laravel modules. This integration includes:</p><ul><li>Direct access to all build assets (e.g., preload files, message bundles).</li><li>Rich metadata extracted from <code>.library</code>, <code>package.json</code>, and <code>ui5.yaml</code>.</li><li>Clean namespacing on both the backend (PHP) and frontend (JavaScript).</li></ul><p>Unlike apps, libraries <em>do not</em> support subordinate artifacts such as cards, tiles, or reports. They serve purely as shared dependencies.</p><h2 id="how-to-generate" tabindex="-1">How to Generate <a class="header-anchor" href="#how-to-generate" aria-label="Permalink to &quot;How to Generate&quot;">​</a></h2><p>Use the following Artisan command to generate a new UI5 library:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ui5:lib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Charts</span></span></code></pre></div><p>This assumes a source folder exists in one of the following forms:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>../ui5-charts-lib/                ← LaravelUi5 naming convention</span></span>
<span class="line"><span>../io.pragmatiqu.charts/          ← SAP Easy UI5 convention</span></span></code></pre></div><p>Before running the command, make sure to build the library via:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Option</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>--php-ns-prefix</code></td><td style="text-align:left;">Sets the backend namespace prefix (default: <code>Pragmatiqu</code>)</td></tr><tr><td style="text-align:left;"><code>--create</code></td><td style="text-align:left;">Forces scaffolding a new library module</td></tr><tr><td style="text-align:left;"><code>--refresh</code></td><td style="text-align:left;">Updates assets and class files if the module already exists</td></tr></tbody></table><blockquote><p>⚠️ When neither <code>--create</code> nor <code>--refresh</code> is provided, LaravelUi5 will decide based on the presence of the module.</p></blockquote><h2 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h2><p>Upon successful execution, the following artifacts are generated inside the Laravel project:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ui5/Charts/</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── ChartsLibrary.php         ← Library metadata class</span></span>
<span class="line"><span>│   └── ChartsModule.php          ← Module wrapper</span></span>
<span class="line"><span>└── resources/ui5/                ← UI5 assets (preloads, messages, etc.)</span></span></code></pre></div><p>The build assets are copied from the following folder:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>../ui5-charts-lib/dist/resources/io/pragmatiqu/charts/</span></span></code></pre></div><h2 id="metadata-resolution" tabindex="-1">Metadata Resolution <a class="header-anchor" href="#metadata-resolution" aria-label="Permalink to &quot;Metadata Resolution&quot;">​</a></h2><p>LaravelUi5 reads library metadata from three locations in the source folder:</p><h3 id="ui5-yaml" tabindex="-1"><code>ui5.yaml</code> <a class="header-anchor" href="#ui5-yaml" aria-label="Permalink to &quot;\`ui5.yaml\`&quot;">​</a></h3><p>Used to determine the UI5 namespace:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">io.pragmatiqu.charts</span></span></code></pre></div><h3 id="library-xml" tabindex="-1"><code>.library</code> XML <a class="header-anchor" href="#library-xml" aria-label="Permalink to &quot;\`.library\` XML&quot;">​</a></h3><p>Used to extract:</p><ul><li><code>title</code></li><li><code>description</code></li><li><code>vendor</code> (if available)</li></ul><h3 id="package-json" tabindex="-1"><code>package.json</code> <a class="header-anchor" href="#package-json" aria-label="Permalink to &quot;\`package.json\`&quot;">​</a></h3><p>Used to extract the current version of the library:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.3.2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>If any of the above values are missing, fallback placeholders are inserted and should be manually reviewed.</p><h2 id="class-structure" tabindex="-1">Class Structure <a class="header-anchor" href="#class-structure" aria-label="Permalink to &quot;Class Structure&quot;">​</a></h2><p>The generated <code>ChartsLibrary.php</code> class provides the following methods:</p><table tabindex="0"><thead><tr><th style="text-align:left;">Method</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>getTitle()</code></td><td style="text-align:left;">Returns the library title from <code>.library</code></td></tr><tr><td style="text-align:left;"><code>getDescription()</code></td><td style="text-align:left;">Returns the library description</td></tr><tr><td style="text-align:left;"><code>getVersion()</code></td><td style="text-align:left;">Extracted from <code>package.json</code></td></tr><tr><td style="text-align:left;"><code>getNamespace()</code></td><td style="text-align:left;">The full UI5 namespace from <code>ui5.yaml</code></td></tr><tr><td style="text-align:left;"><code>getSlug()</code></td><td style="text-align:left;">The lowercase domain name used in routing</td></tr></tbody></table><p>The library is always wrapped inside a <code>ChartsModule.php</code> module, which registers it as part of the global <code>Ui5Registry</code>.</p><h2 id="module-integration" tabindex="-1">Module Integration <a class="header-anchor" href="#module-integration" aria-label="Permalink to &quot;Module Integration&quot;">​</a></h2><p>Each library is part of a domain-specific module. The module must be registered in your application’s <code>config/ui5.php</code> file:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;charts&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\Pragmatiqu\\Charts\\ChartsModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><p>This mapping defines how the library is exposed at runtime, and allows LaravelUi5 to route and manage resources per domain.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ul><li>Keep each library focused on a single responsibility</li><li>Follow semantic versioning in <code>package.json</code></li><li>Use consistent naming between the JS namespace, folder name, and PHP class</li><li>Avoid bundling business logic into libraries — delegate that to apps</li></ul><h2 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">​</a></h2><ul><li><a href="./module.html">Modules</a></li><li><a href="./app.html">Apps</a></li><li><a href="./index.html#artifact-hierarchy">Artifacts Overview</a></li></ul>`,48)])])}const g=a(l,[["render",n]]);export{u as __pageData,g as default};
