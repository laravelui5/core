import{_ as a,c as t,o as i,ag as s}from"./chunks/framework.C4nOkCZI.js";const k=JSON.parse('{"title":"UI5Report","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/backend/report.md","filePath":"guide/backend/report.md"}'),n={name:"guide/backend/report.md"};function l(r,e,o,p,d,c){return i(),t("div",null,[...e[0]||(e[0]=[s(`<h1 id="ui5report" tabindex="-1">UI5Report <a class="header-anchor" href="#ui5report" aria-label="Permalink to &quot;UI5Report&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>A <code>Ui5Report</code> is a specialized type of UI5 artifact within your Laravel UI5 app. It presents structured business data, typically for display in the browser, for download as a PDF, or for export as an Excel file.</p><p>Reports can fulfill a variety of purposes, including:</p><ul><li>Business analysis (e.g. &quot;Unbilled Hours&quot;)</li><li>Period-end closing (monthly or annual)</li><li>Controlling &amp; project settlement</li><li>Operational listings or evaluations</li><li>Tax documentation or accruals</li></ul><h2 id="conceptual-overview" tabindex="-1">Conceptual Overview <a class="header-anchor" href="#conceptual-overview" aria-label="Permalink to &quot;Conceptual Overview&quot;">​</a></h2><p>Reports in LaravelUi5 are first-class artifacts that combine backend data logic with frontend rendering.</p><p>They are always part of an app module and follow a well-defined lifecycle.</p><h3 id="report-lifecycle" tabindex="-1">Report Lifecycle <a class="header-anchor" href="#report-lifecycle" aria-label="Permalink to &quot;Report Lifecycle&quot;">​</a></h3><p>A UI5 report has <em>three distinct phases</em>.</p><h4 id="_1-selection-phase" tabindex="-1">1. Selection Phase <a class="header-anchor" href="#_1-selection-phase" aria-label="Permalink to &quot;1. Selection Phase&quot;">​</a></h4><p>The selection screen is built using:</p><ul><li><code>Report.controller.js</code> (UI5 logic)</li><li><code>Report.view.xml</code> (UI layout)</li></ul><p>The controller collects user input and submits it to the backend. Inputs are mapped to <code>#[ReportParam(...)]</code> attributes on the report’s <code>ReportDataProvider</code>.</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ReportParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;month&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ReportParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;employee_id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;int&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modelClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Employee</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span></code></pre></div><h4 id="_2-rendering-phase" tabindex="-1">2. Rendering Phase <a class="header-anchor" href="#_2-rendering-phase" aria-label="Permalink to &quot;2. Rendering Phase&quot;">​</a></h4><p>The actual report is rendered via:</p><ul><li><code>report.blade.php</code> (Laravel view)</li><li><code>getViewData(array $context)</code> from <code>ReportDataProviderInterface</code></li></ul><p>This view is loaded inside an <code>iframe</code> in the UI5 app. It can contain tables, charts, conditional logic, etc.</p><h4 id="_3-action-phase-optional" tabindex="-1">3. Action Phase (Optional) <a class="header-anchor" href="#_3-action-phase-optional" aria-label="Permalink to &quot;3. Action Phase (Optional)&quot;">​</a></h4><p>Report actions implement <code>ReportActionInterface</code> and can:</p><ul><li>update data</li><li>trigger background jobs</li><li>perform bulk modifications</li></ul><p>They are declared in the report metadata and rendered as UI buttons. The report context (user inputs) is passed automatically to the action.</p><h3 id="core-interfaces" tabindex="-1">Core Interfaces <a class="header-anchor" href="#core-interfaces" aria-label="Permalink to &quot;Core Interfaces&quot;">​</a></h3><p><code>ReportDataProviderInterface</code></p><ul><li><code>getEntityType()</code> returns report metadata (columns, types, labels)</li><li><code>getViewData(array $context)</code> returns data for HTML rendering</li><li><code>getExportData(array $context)</code> (optional) for CSV/XLSX/PDF generation</li><li><code>getReportName()</code> defines export file names</li></ul><p><code>ReportActionInterface</code></p><ul><li><code>label()</code>, <code>description()</code>, <code>execute(array $context)</code></li><li>Triggered from the frontend via UI5 interaction</li></ul><p><code>#[ReportParam(...)]</code></p><ul><li>Declarative parameter injection</li><li>Type-safe and model-aware</li></ul><h2 id="how-to-generate" tabindex="-1">How to Generate <a class="header-anchor" href="#how-to-generate" aria-label="Permalink to &quot;How to Generate&quot;">​</a></h2><p>The <code>ui5:report</code> command scaffolds all required artifacts to implement a UI5-compliant report inside a given application module.</p><p>It follows the LaravelUi5 architectural principles:</p><ul><li>Artifacts are generated <em>explicitly in code</em> — no magic</li><li>Reports are <em>registered within a specific app</em> (e.g. Offers, Timesheet)</li><li>Resources are <em>cleanly structured</em> in the file system</li><li>Logic is guided by <em>interfaces, attributes, and conventions</em></li></ul><p>Run the following:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ui5:report</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Timesheet/Hours</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --title=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Booked Hours&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --description=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hours booked by employees&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --formats=html,pdf,xlsx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --actions=discardHours,approveHours</span></span></code></pre></div><p>This will create a report called <code>Hours</code> inside the <code>Timesheet</code> app module.</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">Option</th><th style="text-align:left;">Default</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code> (arg)</td><td style="text-align:left;"><em>(required)</em></td><td style="text-align:left;">Format: <code>AppNameReportName</code> (e.g. <code>SalesSummary</code>)</td></tr><tr><td style="text-align:left;"><code>--php-ns-prefix</code></td><td style="text-align:left;"><code>Pragmatiqu</code></td><td style="text-align:left;">PHP namespace root</td></tr><tr><td style="text-align:left;"><code>--title</code></td><td style="text-align:left;">Report class name</td><td style="text-align:left;">UI-facing report title</td></tr><tr><td style="text-align:left;"><code>--description</code></td><td style="text-align:left;"><code>Report generated via ui5:report</code></td><td style="text-align:left;">Metadata description</td></tr><tr><td style="text-align:left;"><code>--formats</code></td><td style="text-align:left;"><code>html,pdf</code></td><td style="text-align:left;">Supported formats (<code>html</code>, <code>pdf</code>, <code>xlsx</code>, etc.)</td></tr><tr><td style="text-align:left;"><code>--actions</code></td><td style="text-align:left;"><em>(optional)</em></td><td style="text-align:left;">Comma-separated list of backend action classes</td></tr></tbody></table><h2 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h2><p>Given <code>TimesheetHours</code>, the following structure is created:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ui5/</span></span>
<span class="line"><span>└── Timesheet/</span></span>
<span class="line"><span>    ├── src/</span></span>
<span class="line"><span>    │   └── Reports/</span></span>
<span class="line"><span>    │       └── Hours/</span></span>
<span class="line"><span>    │           ├── Report.php</span></span>
<span class="line"><span>    │           ├── ReportDataProvider.php</span></span>
<span class="line"><span>    │           ├── DiscardHoursAction.php</span></span>
<span class="line"><span>    │           └── ApproveHoursAction.php</span></span>
<span class="line"><span>    └── resources/</span></span>
<span class="line"><span>        └── ui5/</span></span>
<span class="line"><span>            └── reports/</span></span>
<span class="line"><span>                └── hours/</span></span>
<span class="line"><span>                    ├── Report.controller.js</span></span>
<span class="line"><span>                    ├── Report.view.xml</span></span>
<span class="line"><span>                    └── report.blade.php</span></span></code></pre></div><h2 id="artifact-overview" tabindex="-1">Artifact Overview <a class="header-anchor" href="#artifact-overview" aria-label="Permalink to &quot;Artifact Overview&quot;">​</a></h2><h3 id="php" tabindex="-1">PHP <a class="header-anchor" href="#php" aria-label="Permalink to &quot;PHP&quot;">​</a></h3><p><strong>Report.php</strong> (<code>Ui5ReportInterface</code>)</p><p>Defines the report artifact with metadata and structural references:</p><blockquote><p>💡 A report may also expose a full OData structure via <code>getEntityType()</code>, which allows UI5 tables to bind automatically and filters to be generated dynamically.</p></blockquote><p><strong>ReportDataProvider.php</strong> (<code>ReportDataProviderInterface</code>)</p><p>Implements the core logic of the report:</p><ul><li>Fetching and preparing the dataset</li><li>Generating structured exports (PDF, Excel, CSV)</li><li>Defining visible columns and metadata</li></ul><p><strong>Actions</strong> (Optional)</p><p>If <code>--actions=...</code> is provided, each will generate a class that implements <code>ReportActionInterface</code>.</p><p>These actions may trigger backend workflows, mark reports as processed, or send notifications.</p><h3 id="frontend" tabindex="-1">Frontend <a class="header-anchor" href="#frontend" aria-label="Permalink to &quot;Frontend&quot;">​</a></h3><ul><li><code>Report.controller.js</code>: Contains logic for selection screen</li><li><code>Report.view.xml</code>: Selection UI (inputs, filters)</li><li><code>report.blade.php</code>: Actual report content rendered in iframe</li></ul><h2 id="module-integration" tabindex="-1">Module Integration <a class="header-anchor" href="#module-integration" aria-label="Permalink to &quot;Module Integration&quot;">​</a></h2><p>Reports are <em>subordinate artifacts</em> and must be <em>manually wired</em> into their module:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getReports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Reports\\Hours\\Report</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="advanced-capabilities-planned" tabindex="-1">Advanced Capabilities (<em>planned</em>) <a class="header-anchor" href="#advanced-capabilities-planned" aria-label="Permalink to &quot;Advanced Capabilities (*planned*)&quot;">​</a></h2><p>Thanks to the structural nature of reports, additional features are possible:</p><ul><li><em>UI5 table personalization</em>: column selection, filter variants, sorting</li><li><em>OData binding</em>: via auto-generated <code>$metadata</code> from <code>EntityType</code></li><li><em>Export consistency</em>: PDF and Excel formats use the same column definitions</li><li><em>CI/branding integration</em>: tenant-specific logos and labels are injectable</li><li><em>Component-based rendering</em>: reports are displayed as isolated UI5 mini-apps</li></ul><h2 id="sample-use-case-annualcutoff-report" tabindex="-1">Sample Use Case: “AnnualCutOff Report” <a class="header-anchor" href="#sample-use-case-annualcutoff-report" aria-label="Permalink to &quot;Sample Use Case: “AnnualCutOff Report”&quot;">​</a></h2><p>A classic scenario: Displaying all non-billable hours of the current year, with the option to archive them.</p><p><strong>Flow</strong></p><ol><li>User selects a year → clicks &quot;Run&quot;</li><li>Report displays project totals in a table</li><li>User clicks dropdown action: “Archive”</li><li>Backend updates status or creates a booking</li></ol><h2 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">​</a></h2><ul><li><a href="./module.html">Modules</a></li><li><a href="https://lodata.io/modelling/types/collections.html" target="_blank" rel="noreferrer">Lodata EntityTypes</a></li><li><a href="https://sdk.openui5.org/" target="_blank" rel="noreferrer">OpenUI5 Documentation</a></li><li><a href="https://laravel.com/docs/12.x/blade#main-content" target="_blank" rel="noreferrer">Laravel Blade</a></li></ul>`,67)])])}const u=a(n,[["render",l]]);export{k as __pageData,u as default};
