import{_ as a,c as t,o as i,ag as s}from"./chunks/framework.C4nOkCZI.js";const u=JSON.parse('{"title":"Ui5Action","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/backend/action.md","filePath":"guide/backend/action.md"}'),l={name:"guide/backend/action.md"};function n(o,e,d,c,r,p){return i(),t("div",null,[...e[0]||(e[0]=[s(`<h1 id="ui5action" tabindex="-1">Ui5Action <a class="header-anchor" href="#ui5action" aria-label="Permalink to &quot;Ui5Action&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>The <code>Ui5Action</code> is an executable backend operation exposed to your UI5 frontend. It allows UI5 apps to invoke Laravel-native logic through a clean, declarative interface—ideal for tasks like toggling flags, performing validations, triggering workflows, or modifying state.</p><p>Each action consists of a metadata class (<code>Action.php</code>) and a dedicated handler (<code>Handler.php</code>). Actions are HTTP-addressable, typed, modular, and fully integrated with the LaravelUi5 registry and routing system.</p><h2 id="conceptual-overview" tabindex="-1">Conceptual Overview <a class="header-anchor" href="#conceptual-overview" aria-label="Permalink to &quot;Conceptual Overview&quot;">​</a></h2><h3 id="purpose" tabindex="-1">Purpose <a class="header-anchor" href="#purpose" aria-label="Permalink to &quot;Purpose&quot;">​</a></h3><p>UI5 Actions provide a flexible and secure way to bridge UI interaction and backend logic. They:</p><ul><li>expose an intent like <code>ToggleLock</code> or <code>ApproveInvoice</code></li><li>support typed HTTP methods (<code>POST</code>, <code>PATCH</code>, etc.)</li><li>define routing keys and JS namespaces</li><li>are callable via <code>LaravelUi5.call(...)</code> from the frontend</li></ul><h3 id="structure" tabindex="-1">Structure <a class="header-anchor" href="#structure" aria-label="Permalink to &quot;Structure&quot;">​</a></h3><ul><li><code>Action.php</code>: Defines metadata (title, description, route, namespace, HTTP method)</li><li><code>Handler.php</code>: Contains the actual logic to be executed</li><li>Route is automatically resolved via the action&#39;s <code>urlKey()</code> and method</li></ul><h3 id="lifecycle" tabindex="-1">Lifecycle <a class="header-anchor" href="#lifecycle" aria-label="Permalink to &quot;Lifecycle&quot;">​</a></h3><ol><li>Action is registered in a <code>Ui5Module</code> via <code>getActions()</code></li><li>UI5 calls the action by name (e.g. <code>ToggleLock</code>)</li><li>The system resolves the route and method</li><li>The <code>Handler</code> class is executed with request payload</li><li>A response is returned (status, data, or message)</li></ol><h2 id="how-to-generate" tabindex="-1">How to Generate <a class="header-anchor" href="#how-to-generate" aria-label="Permalink to &quot;How to Generate&quot;">​</a></h2><p>Example:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ui5:action</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Users/ToggleLock</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --method=POST</span></span></code></pre></div><p>This will generate an action called <code>ToggleLock</code> in the <code>Users</code> module, accessible via <code>POST /ui5/actions/users/toggle_lock</code>.</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">Option</th><th style="text-align:left;">Default</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code> (argument)</td><td style="text-align:left;"><em>(required)</em></td><td style="text-align:left;">Format: <code>{AppName}/{ActionName}</code></td></tr><tr><td style="text-align:left;"><code>--method</code></td><td style="text-align:left;"><code>POST</code></td><td style="text-align:left;">HTTP method (e.g. <code>POST</code>, <code>PATCH</code>, <code>DELETE</code>)</td></tr><tr><td style="text-align:left;"><code>--php-ns-prefix</code></td><td style="text-align:left;"><code>Pragmatiqu</code></td><td style="text-align:left;">Root namespace for PHP</td></tr><tr><td style="text-align:left;"><code>--js-ns-prefix</code></td><td style="text-align:left;"><code>io.pragmatiqu</code></td><td style="text-align:left;">Root namespace for JS integration</td></tr></tbody></table><h2 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h2><p>For <code>Users/ToggleLock</code>, the following structure is generated:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ui5/</span></span>
<span class="line"><span>└── Users/</span></span>
<span class="line"><span>    └── src/</span></span>
<span class="line"><span>        └── Actions/</span></span>
<span class="line"><span>            └── ToggleLock/</span></span>
<span class="line"><span>                ├── Action.php</span></span>
<span class="line"><span>                └── Handler.php</span></span></code></pre></div><h2 id="artifact-roles" tabindex="-1">Artifact Roles <a class="header-anchor" href="#artifact-roles" aria-label="Permalink to &quot;Artifact Roles&quot;">​</a></h2><p><code>Action.php</code></p><ul><li>Implements <code>Ui5ActionInterface</code></li><li>Defines title, description, <code>urlKey()</code>, HTTP method, JS namespace</li><li>Returns reference to <code>Handler::class</code></li></ul><p><code>Handler.php</code></p><ul><li>Contains actual logic (e.g. updates, side effects, validation)</li><li>Invoked when the action is called from the frontend</li><li>Returns response as <code>array</code>, <code>JsonResponse</code>, or any Laravel response type</li></ul><h2 id="module-integration" tabindex="-1">Module Integration <a class="header-anchor" href="#module-integration" aria-label="Permalink to &quot;Module Integration&quot;">​</a></h2><p>Actions are <em>module-bound</em> and must be registered in the module class:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getActions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Actions\\ToggleLock\\Action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Once registered, the action becomes callable via:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LaravelUi5.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ToggleLock&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><p>The system resolves the correct URL, method, and handler automatically.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ul><li>Use descriptive action names (<code>ToggleLock</code>, <code>DiscardDraft</code>, <code>SyncProject</code>)</li><li>Prefer <code>POST</code> or <code>PATCH</code> for mutating actions</li><li>Keep <code>Handler.php</code> focused and testable</li><li>Return clear messages or status objects to the UI</li><li>Use Laravel request validation if needed</li></ul><h2 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">​</a></h2><ul><li></li></ul>`,36)])])}const g=a(l,[["render",n]]);export{u as __pageData,g as default};
