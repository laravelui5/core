import{_ as t,c as i,o as a,ag as s}from"./chunks/framework.C4nOkCZI.js";const u=JSON.parse('{"title":"Ui5Module","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/backend/module.md","filePath":"guide/backend/module.md"}'),l={name:"guide/backend/module.md"};function o(n,e,r,d,c,p){return a(),i("div",null,[...e[0]||(e[0]=[s(`<h1 id="ui5module" tabindex="-1">Ui5Module <a class="header-anchor" href="#ui5module" aria-label="Permalink to &quot;Ui5Module&quot;">‚Äã</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">‚Äã</a></h2><p>A <code>Ui5Module</code> represents the top-level container for all UI5 artifacts belonging to a specific domain, such as <code>Users</code>, <code>Timesheet</code>, or <code>Budget</code>.</p><p>Each module corresponds to <em>exactly one</em> UI5 application <em>or</em> one UI5 library.</p><p>Applications may additionally define subordinate artifacts such as cards, reports, tiles, KPIs, and backend actions.</p><p>Libraries are intentionally lightweight and must not define subordinate artifacts.</p><h2 id="lifecycle-creation" tabindex="-1">Lifecycle &amp; Creation <a class="header-anchor" href="#lifecycle-creation" aria-label="Permalink to &quot;Lifecycle &amp; Creation&quot;">‚Äã</a></h2><p>Modules are not created explicitly. They are established automatically when generating either:</p><ul><li><p>an application via</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ui5:app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Users</span></span></code></pre></div></li><li><p>or a library via</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ui5:lib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Core</span></span></code></pre></div></li></ul><p>The domain name provided in these commands (e.g. <code>Users</code>, <code>Core</code>) defines the module name and directory.</p><blockquote><p>‚ö†Ô∏è A module can <strong>only contain either an application or a library</strong> ‚Äî not both. This is enforced by the LaravelUi5 architecture and reflected in the interface constraints.</p></blockquote><h2 id="artifact-composition" tabindex="-1">Artifact Composition <a class="header-anchor" href="#artifact-composition" aria-label="Permalink to &quot;Artifact Composition&quot;">‚Äã</a></h2><p>Each module exposes its contents via a structured API:</p><table tabindex="0"><thead><tr><th style="text-align:left;">Artifact Type</th><th style="text-align:left;">Method</th><th style="text-align:left;">Notes</th></tr></thead><tbody><tr><td style="text-align:left;">Application</td><td style="text-align:left;"><code>getApp()</code></td><td style="text-align:left;">Returns the app if present</td></tr><tr><td style="text-align:left;">Library</td><td style="text-align:left;"><code>getLibrary()</code></td><td style="text-align:left;">Returns the library if present</td></tr><tr><td style="text-align:left;">Cards</td><td style="text-align:left;"><code>getCards()</code></td><td style="text-align:left;">Returns cards tied to the module context</td></tr><tr><td style="text-align:left;">Reports</td><td style="text-align:left;"><code>getReports()</code></td><td style="text-align:left;">Returns reports tied to the module conetxt</td></tr><tr><td style="text-align:left;">Tiles</td><td style="text-align:left;"><code>getTiles()</code></td><td style="text-align:left;">Returns tiles tied to the module context</td></tr><tr><td style="text-align:left;">KPIs</td><td style="text-align:left;"><code>getKpis()</code></td><td style="text-align:left;">Returns KPIs tied to the module context</td></tr><tr><td style="text-align:left;">Actions (API)</td><td style="text-align:left;"><code>getActions()</code></td><td style="text-align:left;">Returns invokable endpoints via <code>LaravelUi5.call()</code> to the module context</td></tr><tr><td style="text-align:left;">‚Äì</td><td style="text-align:left;"><code>getArtifactRoot()</code></td><td style="text-align:left;">Returns either the app or library tied to the module context</td></tr></tbody></table><h2 id="registration-of-subordinate-artifacts" tabindex="-1">Registration of Subordinate Artifacts <a class="header-anchor" href="#registration-of-subordinate-artifacts" aria-label="Permalink to &quot;Registration of Subordinate Artifacts&quot;">‚Äã</a></h2><p>All subordinate artifacts (cards, reports, etc.) must be <em>explicitly registered</em> inside the module class, typically in the <code>getCards()</code>, <code>getReports()</code>, etc. methods.</p><p>LaravelUi5 does <em>not</em> auto-register artifacts.</p><p>Instead, each <code>ui5:*</code> command will print a helpful message after successful generation:</p><blockquote><p>üí° Don‚Äôt forget to register this report in your module.</p></blockquote><p>This pattern ensures that:</p><ul><li>developers retain full control over module structure,</li><li>artifacts are only registered if intentionally exposed,</li><li>and the module remains deterministic and predictable at runtime.</li></ul><h2 id="module-registration" tabindex="-1">Module Registration <a class="header-anchor" href="#module-registration" aria-label="Permalink to &quot;Module Registration&quot;">‚Äã</a></h2><p>All modules must be explicitly registered in your <code>config/ui5.php</code> file under the <code>modules</code> key.</p><p>The mapping uses lowercase slugs as keys and module class references as values:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;modules&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;users&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\Pragmatiqu\\Users\\UsersModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;timesheet&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\Acme\\Ui5\\MyCompanyTimesheetModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span></code></pre></div><p>This explicit mapping allows LaravelUi5 to resolve modules reliably by their <em>URL segment</em>, decoupled from their internal namespace or class name.</p><blockquote><p>üìå This is especially useful when integrating packages from multiple vendors ‚Äî internal module names can remain consistent, while public segments are assigned flexibly at deployment time.</p></blockquote><blockquote><p>‚ö†Ô∏è LaravelUi5 does <strong>not</strong> perform automatic scanning or registration. All modules must be declared explicitly to keep the system deterministic and deployment-friendly.</p></blockquote><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">‚Äã</a></h2><ul><li>A <code>Ui5Module</code> is the structural root for all UI5-related backend and frontend logic tied to a single domain.</li><li>Modules are created when you generate an app or library.</li><li>Modules contain either an application <em>or</em> a library ‚Äî never both.</li><li>Only app modules may define subordinate artifacts.</li><li>Artifact registration is explicit and code-driven.</li><li>Integrators control URL segments independently of internal module names.</li></ul><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">‚Äã</a></h2><ul><li><a href="./app.html">Ui5App</a></li><li><a href="./library.html">Ui5Library</a></li><li><a href="./card.html">Cards</a>, <a href="./report.html">Reports</a>, <a href="./tile.html">Tiles</a>, <a href="./kpi.html">KPIs</a>, <a href="./action.html">Actions</a></li><li><a href="./index.html#artifact-hierarchy">Overview ‚Üí Artifact Hierarchy</a></li></ul>`,32)])])}const m=t(l,[["render",o]]);export{u as __pageData,m as default};
