import{_ as a,c as i,o as t,ag as s}from"./chunks/framework.C4nOkCZI.js";const u=JSON.parse('{"title":"UI5Card","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/backend/card.md","filePath":"guide/backend/card.md"}'),n={name:"guide/backend/card.md"};function l(r,e,d,o,c,p){return t(),i("div",null,[...e[0]||(e[0]=[s(`<h1 id="ui5card" tabindex="-1">UI5Card <a class="header-anchor" href="#ui5card" aria-label="Permalink to &quot;UI5Card&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>The <code>Ui5Card</code> is a specialized type of UI5 artifact within your Laravel UI5 app. It represents a compact, embeddable UI element—such as a KPI, list, or analytical preview—that can be dynamically rendered on dashboards or overview pages.</p><p>Each card is defined by a PHP class that encapsulates its metadata (title, description, namespace, route key) and references a Blade-based manifest used by the UI5 runtime. Optionally, a dedicated provider class supplies the underlying data logic.</p><p>Cards are modular by design. They belong to a parent <code>Ui5Module</code>, can be rendered independently via a dedicated route, and integrate seamlessly with UI5’s integration card framework—making them ideal for building reusable, dashboard-ready components in a multi-module SaaS architecture.</p><h2 id="conceptual-overview" tabindex="-1">Conceptual Overview <a class="header-anchor" href="#conceptual-overview" aria-label="Permalink to &quot;Conceptual Overview&quot;">​</a></h2><h3 id="purpose" tabindex="-1">Purpose <a class="header-anchor" href="#purpose" aria-label="Permalink to &quot;Purpose&quot;">​</a></h3><p>A UI5 Card is a modular, embeddable UI artifact used to visualize business data in a compact and interactive format. The <code>ui5:card</code> command creates the necessary files for a backend-powered UI5 Integration Card within your LaravelUi5 app.</p><p>Each card consists of:</p><ul><li>A PHP class implementing <code>Ui5CardInterface</code></li><li>A dedicated data provider</li><li>A <code>manifest.blade.php</code> file rendered on demand</li></ul><h3 id="lifecycle-overview" tabindex="-1">Lifecycle Overview <a class="header-anchor" href="#lifecycle-overview" aria-label="Permalink to &quot;Lifecycle Overview&quot;">​</a></h3><ol><li>The card is instantiated inside a LaravelUi5 module.</li><li>The UI5 frontend loads the manifest via a dynamic HTTP route.</li><li>The manifest references a data path backed by the CardProvider.</li><li>UI5 renders the card (e.g. KPI, List, Table, Object) in a dashboard or launchpad.</li><li>Optional interaction flows (e.g. navigation, filtering) are defined in the manifest.</li></ol><h3 id="structure" tabindex="-1">Structure <a class="header-anchor" href="#structure" aria-label="Permalink to &quot;Structure&quot;">​</a></h3><ul><li>The <code>Card.php</code> class defines metadata such as title, description, URL key, and JS namespace.</li><li>The <code>CardProvider.php</code> class exposes dynamic data to the card via controller logic or services.</li><li>The <code>manifest.blade.php</code> file contains a customizable UI5 Integration Card manifest, rendered per request.</li></ul><h2 id="how-to-generate" tabindex="-1">How to Generate <a class="header-anchor" href="#how-to-generate" aria-label="Permalink to &quot;How to Generate&quot;">​</a></h2><p>Run the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ui5:card</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Finance/RevenueCard</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --title=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Revenue Overview&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --description=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Displays key revenue metrics for current quarter&quot;</span></span></code></pre></div><p>This will:</p><ul><li>Create the card <code>RevenueCard</code> under the module <code>Finance</code></li><li>Generate all required PHP and resource files</li><li>Set default URL key: <code>card/finance/revenue</code></li></ul><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">Option</th><th style="text-align:left;">Default</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code> (argument)</td><td style="text-align:left;"><em>(required)</em></td><td style="text-align:left;">Format: <code>{AppName}/{CardName}</code>, e.g. <code>Sales/OverviewCard</code></td></tr><tr><td style="text-align:left;"><code>--php-ns-prefix</code></td><td style="text-align:left;"><code>Pragmatiqu</code></td><td style="text-align:left;">PHP namespace prefix</td></tr><tr><td style="text-align:left;"><code>--js-ns-prefix</code></td><td style="text-align:left;"><code>io.pragmatiqu</code></td><td style="text-align:left;">JS namespace for UI5 artifacts</td></tr><tr><td style="text-align:left;"><code>--title</code></td><td style="text-align:left;">Derived from card name</td><td style="text-align:left;">Main title shown in the UI</td></tr><tr><td style="text-align:left;"><code>--description</code></td><td style="text-align:left;">“Displays key data for {Card}”</td><td style="text-align:left;">Used as subtitle in the manifest</td></tr></tbody></table><blockquote><p>Note: The <code>Card</code> suffix is stripped from the URL and view names but remains in the class name.</p></blockquote><h2 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h2><p>Given the command <code>php artisan ui5:card Finance/RevenueCard</code>, the following structure is created:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ui5/</span></span>
<span class="line"><span>└── Finance/</span></span>
<span class="line"><span>    ├── src/</span></span>
<span class="line"><span>    │   └── Cards/</span></span>
<span class="line"><span>    │       ├── RevenueCard.php</span></span>
<span class="line"><span>    │       └── RevenueCardProvider.php</span></span>
<span class="line"><span>    └── resources/</span></span>
<span class="line"><span>        └── ui5/</span></span>
<span class="line"><span>            └── cards/</span></span>
<span class="line"><span>                └── revenue/</span></span>
<span class="line"><span>                    └── manifest.blade.php</span></span></code></pre></div><h2 id="artifact-roles" tabindex="-1">Artifact Roles <a class="header-anchor" href="#artifact-roles" aria-label="Permalink to &quot;Artifact Roles&quot;">​</a></h2><p><code>RevenueCard.php</code></p><ul><li>Implements <code>Ui5CardInterface</code></li><li>Defines <code>title()</code>, <code>description()</code>, <code>urlKey()</code>, and JS namespace</li><li>References the corresponding provider class</li></ul><p><code>RevenueCardProvider.php</code></p><ul><li>Optional class for providing dynamic data</li><li>Can interact with Eloquent, services, APIs, or caching layers</li></ul><p><code>manifest.blade.php</code></p><ul><li>UI5 Integration Card manifest rendered with Laravel Blade</li><li>Supports localization, logic, and custom data URLs</li></ul><h2 id="module-integration" tabindex="-1">Module Integration <a class="header-anchor" href="#module-integration" aria-label="Permalink to &quot;Module Integration&quot;">​</a></h2><p>Cards must be registered in your module class by instantiating them:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCards</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Cards\\RevenueCard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This enables discovery and dynamic routing. Each card’s manifest is resolved via the <code>getSlug()</code> defined in the card class.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ul><li>Use <code>{Domain}/{Card}</code> for clarity and consistency</li><li>Keep <code>Card</code> suffix for class names, even if stripped in the URL</li><li>Move heavy data logic into the <code>Provider</code> class</li><li>Use Laravel Blade conditionals and translations inside the manifest</li><li>Prefer standard UI5 card types (<code>List</code>, <code>Object</code>, <code>Analytical</code>, <code>Table</code>)</li><li>Reuse UI5 models and OData services where possible</li></ul><h2 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">​</a></h2><ul><li><a href="https://ui5.sap.com/test-resources/sap/ui/integration/demokit/cardExplorer/index.html" target="_blank" rel="noreferrer">SAP UI5 Integration Cards</a></li><li><a href="https://ui5.sap.com/test-resources/sap/ui/integration/demokit/cardExplorer/webapp/index.html" target="_blank" rel="noreferrer">UI5 Card Explorer</a></li><li><a href="https://pragmatiqu.io/archive/2024/11/12" target="_blank" rel="noreferrer">Using SAP Integration Cards in Your Laravel Dashboard</a></li></ul>`,40)])])}const k=a(n,[["render",l]]);export{u as __pageData,k as default};
