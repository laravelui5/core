import{_ as i,c as a,o as t,ag as s}from"./chunks/framework.C4nOkCZI.js";const u=JSON.parse('{"title":"Ui5Tile","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/backend/tile.md","filePath":"guide/backend/tile.md"}'),l={name:"guide/backend/tile.md"};function n(r,e,o,d,p,c){return t(),a("div",null,[...e[0]||(e[0]=[s(`<h1 id="ui5tile" tabindex="-1">Ui5Tile <a class="header-anchor" href="#ui5tile" aria-label="Permalink to &quot;Ui5Tile&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>The <code>Ui5Tile</code> is a specialized UI5 artifact within your Laravel UI5 app. It represents a small, actionable dashboard element—typically used for navigation, quick summaries, or highlighting a specific business indicator.</p><p>Each tile is defined as a self-contained PHP class within a LaravelUi5 module. It provides title, description, namespace, and routing information, and is backed by an optional provider class that supplies runtime data or visual states.</p><p>Tiles are lightweight, dynamic, and ideal for grid-based dashboards or overview pages.</p><h2 id="conceptual-overview" tabindex="-1">Conceptual Overview <a class="header-anchor" href="#conceptual-overview" aria-label="Permalink to &quot;Conceptual Overview&quot;">​</a></h2><h3 id="purpose" tabindex="-1">Purpose <a class="header-anchor" href="#purpose" aria-label="Permalink to &quot;Purpose&quot;">​</a></h3><p>UI5 Tiles serve as interactive UI blocks that communicate status, KPIs, or entry points to deeper functionality. The <code>ui5:tile</code> command scaffolds everything needed to define and render such a tile, including backend metadata and an optional data source.</p><h3 id="structure" tabindex="-1">Structure <a class="header-anchor" href="#structure" aria-label="Permalink to &quot;Structure&quot;">​</a></h3><ul><li>The main class implements <code>Ui5TileInterface</code>, describing the tile&#39;s metadata and route.</li><li>The <code>Provider.php</code> class delivers runtime values (e.g., status, counter, color).</li><li>Tiles are grouped under a parent app module and registered accordingly.</li></ul><h3 id="tile-lifecycle" tabindex="-1">Tile Lifecycle <a class="header-anchor" href="#tile-lifecycle" aria-label="Permalink to &quot;Tile Lifecycle&quot;">​</a></h3><ol><li>Tile is declared inside a <code>Ui5Module</code> and exposed to the UI5 shell</li><li>The <code>Tile.php</code> class defines core attributes and links to its provider</li><li>At runtime, the provider delivers live data, such as totals or alerts</li><li>The tile is rendered inside a container or launchpad section</li></ol><h2 id="how-to-generate" tabindex="-1">How to Generate <a class="header-anchor" href="#how-to-generate" aria-label="Permalink to &quot;How to Generate&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ui5:tile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Offers/ProjectKpi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --title=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project KPI&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --description=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Displays aggregated project health indicators&quot;</span></span></code></pre></div><p>This will create a tile named <code>ProjectKpi</code> inside the <code>Offers</code> app module.</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">Option</th><th style="text-align:left;">Default</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code> (argument)</td><td style="text-align:left;"><em>(required)</em></td><td style="text-align:left;">Format: <code>{AppName}/{TileName}</code></td></tr><tr><td style="text-align:left;"><code>--php-ns-prefix</code></td><td style="text-align:left;"><code>Pragmatiqu</code></td><td style="text-align:left;">PHP namespace prefix</td></tr><tr><td style="text-align:left;"><code>--js-ns-prefix</code></td><td style="text-align:left;"><code>io.pragmatiqu</code></td><td style="text-align:left;">JS namespace for frontend routing</td></tr><tr><td style="text-align:left;"><code>--title</code></td><td style="text-align:left;">Tile class name</td><td style="text-align:left;">Main title shown in the UI</td></tr><tr><td style="text-align:left;"><code>--description</code></td><td style="text-align:left;">“Tile generated via ui5:tile”</td><td style="text-align:left;">Description in metadata/UI</td></tr></tbody></table><h2 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h2><p>The following file structure is created for <code>Offers/ProjectKpi</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ui5/</span></span>
<span class="line"><span>└── Offers/</span></span>
<span class="line"><span>    └── src/</span></span>
<span class="line"><span>        └── Tiles/</span></span>
<span class="line"><span>            └── ProjectKpi/</span></span>
<span class="line"><span>                ├── Tile.php</span></span>
<span class="line"><span>                └── Provider.php</span></span></code></pre></div><h2 id="artifact-roles" tabindex="-1">Artifact Roles <a class="header-anchor" href="#artifact-roles" aria-label="Permalink to &quot;Artifact Roles&quot;">​</a></h2><p><strong><code>Tile.php</code></strong></p><ul><li>Implements <code>Ui5TileInterface</code></li><li>Defines title, description, URL key, JS namespace</li><li>References the <code>Provider</code> class</li></ul><p><strong><code>Provider.php</code></strong></p><ul><li>Supplies live runtime data for the tile (e.g. value, state, icon)</li><li>Can interact with services, repositories, or metrics</li></ul><h2 id="module-integration" tabindex="-1">Module Integration <a class="header-anchor" href="#module-integration" aria-label="Permalink to &quot;Module Integration&quot;">​</a></h2><p>Tiles must be explicitly registered in their parent module:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getTiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Tiles\\ProjectKpi\\Tile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The system will then route and render the tile using its defined URL key and JS namespace.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ul><li>Use meaningful <code>--title</code> and <code>--description</code> — they appear in dashboards and launchpads</li><li>Keep <code>Tile</code> classes focused: one visual, one purpose</li><li>Push conditional logic into the <code>Provider</code> class</li><li>Use tile color/status/icon to communicate urgency</li><li>Follow a consistent naming scheme like <code>App/TileName</code></li></ul><h2 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">​</a></h2><ul><li><a href="https://sdk.openui5.org/entity/sap.m.GenericTile" target="_blank" rel="noreferrer">SAP UI5 – Tile Controls</a></li></ul>`,33)])])}const k=i(l,[["render",n]]);export{u as __pageData,k as default};
