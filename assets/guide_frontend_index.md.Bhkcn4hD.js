import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.C4nOkCZI.js";const c=JSON.parse('{"title":"What is LaravelUi5?","description":"","frontmatter":{},"headers":[],"relativePath":"guide/frontend/index.md","filePath":"guide/frontend/index.md"}'),n={name:"guide/frontend/index.md"};function l(h,i,p,r,o,d){return e(),a("div",null,[...i[0]||(i[0]=[t(`<h1 id="what-is-laravelui5" tabindex="-1">What is <code>LaravelUi5</code>? <a class="header-anchor" href="#what-is-laravelui5" aria-label="Permalink to &quot;What is \`LaravelUi5\`?&quot;">​</a></h1><p><code>LaravelUi5</code> is a <strong>singleton SDK facade</strong>, inspired by Laravel’s <a href="https://laravel.com/docs/facades" target="_blank" rel="noreferrer">Facade</a> pattern.</p><p>It provides a clean, centralized API for accessing backend actions, endpoints, and shared runtime features from anywhere in your UI5 application, without passing around context or dependencies manually.</p><h3 id="initialization" tabindex="-1">Initialization <a class="header-anchor" href="#initialization" aria-label="Permalink to &quot;Initialization&quot;">​</a></h3><p>You activate the SDK once in your <code>Component.js</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LaravelUi5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com/laravelui5/core/LaravelUi5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  UIComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.init.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> that</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sap.ui.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com/laravelui5/core/LaravelUi5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">LaravelUi5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        LaravelUi5.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(that);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Why not just use <code>LaravelUi5</code> at the top of this module? Short answer: <code>library-preload.js</code> timing.</p><p>When OpenUI5 loads your self-contained app, it tries to fetch all required modules early. But if your app depends on a custom library (like <code>io.pragmatiqu.core</code>), and that library is bundled in a <code>library-preload.js</code> file, you need to wait until it&#39;s fully registered <em>before</em> using its exports.</p><p>If you <code>sap.ui.define([...], function(..., LaravelUi5) {...})</code> too early, the preload hasn’t registered <code>LaravelUi5.js</code> yet, and you’ll get undefined — or worse, an ugly 404.</p><p>So here, we delay loading until runtime with <code>sap.ui.require()</code>. This guarantees the preload is in place, and your module resolves cleanly.</p><p>Feels a little weird? Yep. But it works. And it’s the officially supported way to safely access modules inside a preloaded UI5 library.</p><p><strong>Then use it anywhere</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LaravelUi5.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;toggle-lock&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { user: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LaravelUi5.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/settings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (LaravelUi5.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">can</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;archive-project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Show button or feature</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="why-a-facade" tabindex="-1">Why a &quot;facade&quot;? <a class="header-anchor" href="#why-a-facade" aria-label="Permalink to &quot;Why a &quot;facade&quot;?&quot;">​</a></h3><p>In Laravel, a <strong>facade</strong> is a static proxy to services managed by the framework’s container.</p><p>In UI5, <code>LaravelUi5</code> plays the same role: it hides complexity behind a simple API, while internally managing component context, CSRF tokens, HTTP methods, and routing logic.</p><p>It is implemented as a singleton AMD module, evaluated once and shared across your entire app.</p><h3 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h3><ul><li>Inspired by Laravel, familiar to PHP teams</li><li>Globally accessible – no more <code>this.getOwnerComponent()</code></li><li>Fully testable – no reliance on UI state</li><li>Centralized logic – easy to extend (e.g. <code>withBusy()</code>, <code>getRegistry()</code>, <code>audit()</code>)</li></ul>`,19)])])}const E=s(n,[["render",l]]);export{c as __pageData,E as default};
