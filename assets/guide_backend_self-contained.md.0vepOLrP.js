import{_ as a,c as t,o as s,ag as i}from"./chunks/framework.C4nOkCZI.js";const u=JSON.parse('{"title":"Scaffold a Self-Contained UI5 App","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/backend/self-contained.md","filePath":"guide/backend/self-contained.md"}'),n={name:"guide/backend/self-contained.md"};function o(l,e,d,p,r,c){return s(),t("div",null,[...e[0]||(e[0]=[i(`<h1 id="scaffold-a-self-contained-ui5-app" tabindex="-1">Scaffold a Self-Contained UI5 App <a class="header-anchor" href="#scaffold-a-self-contained-ui5-app" aria-label="Permalink to &quot;Scaffold a Self-Contained UI5 App&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>The <code>ui5:sca</code> Artisan command scaffolds a <em>self-contained OpenUI5 application</em> within your Laravel project. It generates all necessary backend (PHP) and frontend (JS/XML) components inside a dedicated directory under <code>ui5/{Domain}</code> — with proper metadata, autoloading, i18n, and Laravel service provider registration.</p><p>This command is ideal for building modular, app-centric UI5 packages that are fully encapsulated with your business logic.</p><blockquote><p>📝 <strong>Note</strong><br> The <code>self-contained</code> setup is great for quick starts and learning. But for real-world apps, we strongly recommend switching to a workspace-based setup using UI5 CLI and build tools.</p></blockquote><h2 id="conceptual-overview" tabindex="-1">Conceptual Overview <a class="header-anchor" href="#conceptual-overview" aria-label="Permalink to &quot;Conceptual Overview&quot;">​</a></h2><p>A <em>self-contained UI5 app</em> in LaravelUi5 is:</p><ul><li>namespaced (PHP and JS)</li><li>versionable and autoloadable via Composer</li><li>fully integrated into the LaravelUi5 registry system</li><li>equipped with a <code>Ui5App</code>, <code>Ui5Module</code>, and a Laravel <code>ServiceProvider</code></li><li>able to serve UI5 frontend resources directly</li></ul><p>You can think of it as a mini-application with its own identity, registry, and lifecycle.</p><h3 id="how-to-generate" tabindex="-1">How to Generate <a class="header-anchor" href="#how-to-generate" aria-label="Permalink to &quot;How to Generate&quot;">​</a></h3><p>Run the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ui5:sca</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Users</span></span></code></pre></div><p>You may pass additional flags to customize the package namespace, frontend namespace, metadata, and ownership.</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">Option</th><th style="text-align:left;">Default</th><th>Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code> (argument)</td><td style="text-align:left;"><em>(required)</em></td><td>CamelCase app name, e.g. <code>Users</code>, <code>Invoices</code></td></tr><tr><td style="text-align:left;"><code>--package-prefix</code></td><td style="text-align:left;"><code>pragmatiqu</code></td><td>Composer package prefix for <code>composer.json</code></td></tr><tr><td style="text-align:left;"><code>--php-ns-prefix</code></td><td style="text-align:left;"><code>Pragmatiqu</code></td><td>Root PHP namespace</td></tr><tr><td style="text-align:left;"><code>--js-ns-prefix</code></td><td style="text-align:left;"><code>io.pragmatiqu</code></td><td>Root JS namespace used in <code>Component.js</code></td></tr><tr><td style="text-align:left;"><code>--title</code></td><td style="text-align:left;">same as <code>name</code></td><td>Title shown in i18n and metadata</td></tr><tr><td style="text-align:left;"><code>--description</code></td><td style="text-align:left;"><code>Ui5App generated via ui5:sca</code></td><td>Human-readable description for composer + manifest</td></tr><tr><td style="text-align:left;"><code>--vendor</code></td><td style="text-align:left;"><code>Pragmatiqu IT GmbH</code></td><td>Vendor name</td></tr></tbody></table><h2 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h2><p>Running <code>php artisan ui5:sca Users</code> creates the following structure under <code>ui5/Users/</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ui5/</span></span>
<span class="line"><span>└── Users/</span></span>
<span class="line"><span>    ├── composer.json</span></span>
<span class="line"><span>    ├── src/</span></span>
<span class="line"><span>    │   ├── UsersApp.php</span></span>
<span class="line"><span>    │   ├── UsersModule.php</span></span>
<span class="line"><span>    │   └── UsersServiceProvider.php</span></span>
<span class="line"><span>    └── resources/</span></span>
<span class="line"><span>        └── app/</span></span>
<span class="line"><span>            ├── Component.js</span></span>
<span class="line"><span>            ├── controller/</span></span>
<span class="line"><span>            │   └── App.controller.js</span></span>
<span class="line"><span>            ├── view/</span></span>
<span class="line"><span>            │   └── App.view.xml</span></span>
<span class="line"><span>            └── i18n/</span></span>
<span class="line"><span>                ├── i18n.properties</span></span>
<span class="line"><span>                └── i18n_en.properties</span></span></code></pre></div><p>This gives you a ready-to-run UI5 frontend and the PHP classes needed to wire it into the LaravelUi5 ecosystem.</p><h2 id="artifact-details" tabindex="-1">Artifact Details <a class="header-anchor" href="#artifact-details" aria-label="Permalink to &quot;Artifact Details&quot;">​</a></h2><p><strong>composer.json</strong></p><ul><li><code>name</code>: derived from <code>--package-prefix</code> and snake_case of app name</li><li><code>description</code>: as passed via <code>--description</code></li><li><code>autoload.psr-4</code>: for the generated PHP namespace</li></ul><p><strong>PHP Side</strong></p><ul><li><code>UsersApp.php</code>: Implements <code>Ui5AppInterface</code>, provides metadata such as title, URL key, and JS namespace.</li><li><code>UsersModule.php</code>: Registers the app as a <code>Ui5Module</code> within the system.</li><li><code>UsersServiceProvider.php</code>: Laravel service provider for automatic app registration.</li><li><code>composer.json</code>: Enables Composer-based registration and modularization.</li></ul><p><strong>UI5 Side</strong></p><ul><li><code>Component.js</code>: UI5 component bootstrapper including namespace, routing, and initialization.</li><li><code>controller/App.controller.js</code>: Entry point controller for <code>App.view.xml</code>.</li><li><code>view/App.view.xml</code>: Simple <code>sap.m.App</code> layout with a header/title.</li><li><code>i18n.properties</code>: Localized strings including <code>title</code> and <code>description</code>.</li></ul><h2 id="module-integration" tabindex="-1">Module Integration <a class="header-anchor" href="#module-integration" aria-label="Permalink to &quot;Module Integration&quot;">​</a></h2><p>To make the app discoverable by LaravelUi5, register it as a module:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// config/ui5.php</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;users&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\Pragmatiqu\\Users\\UsersModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p>Also, register the <code>ServiceProvider</code> in <code>bootstrap/providers.php</code>:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\Pragmatiqu\\Users\\UsersServiceProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ul><li>Keep the app name short and in CamelCase.</li><li>Always provide a meaningful <code>--title</code> and <code>--description</code> — these are shown in UIs and manifest files.</li><li>Group apps under a consistent vendor and JS namespace.</li><li>Use one folder per app (<code>ui5/{Domain}</code>) to ensure modularity.</li><li>Store UI5 assets under <code>resources/app</code> to keep frontend logic isolated.</li></ul><h2 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">​</a></h2><ul><li><a href="./app.html">Ui5App</a></li><li><a href="./../quickstart.html#Configure-the-Module">Module Registration</a></li><li><a href="https://sdk.openui5.org/" target="_blank" rel="noreferrer">OpenUI5 Documentation</a></li></ul>`,35)])])}const g=a(n,[["render",o]]);export{u as __pageData,g as default};
